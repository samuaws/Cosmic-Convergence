//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Actions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Actions"",
    ""maps"": [
        {
            ""name"": ""Abelities"",
            ""id"": ""62b7a8a9-0ff4-43af-ae6b-8e8828a22191"",
            ""actions"": [
                {
                    ""name"": ""Supernova"",
                    ""type"": ""Button"",
                    ""id"": ""45594901-bb09-4a49-99bf-b6c9488c6aaf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CastSpell"",
                    ""type"": ""Button"",
                    ""id"": ""f17ff149-e177-48eb-8a0a-d6ad36a71b4a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""03c2cf60-8186-4630-b8dc-ed3debbd96de"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Supernova"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9fcec920-1da3-4877-8631-b863e13d5a49"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CastSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Abelities
        m_Abelities = asset.FindActionMap("Abelities", throwIfNotFound: true);
        m_Abelities_Supernova = m_Abelities.FindAction("Supernova", throwIfNotFound: true);
        m_Abelities_CastSpell = m_Abelities.FindAction("CastSpell", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Abelities
    private readonly InputActionMap m_Abelities;
    private List<IAbelitiesActions> m_AbelitiesActionsCallbackInterfaces = new List<IAbelitiesActions>();
    private readonly InputAction m_Abelities_Supernova;
    private readonly InputAction m_Abelities_CastSpell;
    public struct AbelitiesActions
    {
        private @Actions m_Wrapper;
        public AbelitiesActions(@Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Supernova => m_Wrapper.m_Abelities_Supernova;
        public InputAction @CastSpell => m_Wrapper.m_Abelities_CastSpell;
        public InputActionMap Get() { return m_Wrapper.m_Abelities; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AbelitiesActions set) { return set.Get(); }
        public void AddCallbacks(IAbelitiesActions instance)
        {
            if (instance == null || m_Wrapper.m_AbelitiesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AbelitiesActionsCallbackInterfaces.Add(instance);
            @Supernova.started += instance.OnSupernova;
            @Supernova.performed += instance.OnSupernova;
            @Supernova.canceled += instance.OnSupernova;
            @CastSpell.started += instance.OnCastSpell;
            @CastSpell.performed += instance.OnCastSpell;
            @CastSpell.canceled += instance.OnCastSpell;
        }

        private void UnregisterCallbacks(IAbelitiesActions instance)
        {
            @Supernova.started -= instance.OnSupernova;
            @Supernova.performed -= instance.OnSupernova;
            @Supernova.canceled -= instance.OnSupernova;
            @CastSpell.started -= instance.OnCastSpell;
            @CastSpell.performed -= instance.OnCastSpell;
            @CastSpell.canceled -= instance.OnCastSpell;
        }

        public void RemoveCallbacks(IAbelitiesActions instance)
        {
            if (m_Wrapper.m_AbelitiesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAbelitiesActions instance)
        {
            foreach (var item in m_Wrapper.m_AbelitiesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AbelitiesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AbelitiesActions @Abelities => new AbelitiesActions(this);
    public interface IAbelitiesActions
    {
        void OnSupernova(InputAction.CallbackContext context);
        void OnCastSpell(InputAction.CallbackContext context);
    }
}
